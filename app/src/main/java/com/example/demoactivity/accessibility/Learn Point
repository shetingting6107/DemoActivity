//基于辅助功能的内容监听 Accessibility
1.在AndroidManifest中声明继承于 AccessibilityService 的服务

android:label：在无障碍列表中显示该服务的名字
android:permission：需要指定BIND_ACCESSIBILITY_SERVICE权限
intent-filter：这个name是固定不变的

2.编辑MyAccessibilityService 继承于AccessibilityService，并根据需求重写继承的方法

3.配置服务参数 此处使用的是：在AndroidManifest中增加meta-data标签指定特定xml文件——accessibility_config.xml
accessibilityEventTypes：表示该服务对界面中的哪些变化感兴趣，即哪些事件通知，比如窗口打开，滑动，焦点变化，长按等。具体的值可以在AccessibilityEvent类中查到，如typeAllMask表示接受所有的事件通知
    typeViewClicked——点击事件；typeViewSelected——view被选择；typeViewScrolled——滑动事件；typeWindowContentChanged——窗口内容改变；typeAllMask——所有事件
accessibilityFeedbackType：表示反馈方式，比如是语音播放，还是震动
    feedbackSpoken——语音反馈；feedbackHaptic——触觉反馈（震动）；feedbackAudible——音频反馈；feedbackVisual——视频反馈；feedbackGeneric——通用反馈；feedbackAllMask——以上都具备
canRetrieveWindowContent：表示该服务能否访问活动窗口中的内容。也就是如果你希望在服务中获取窗体内容，则需要设置其值为true
description：对该无障碍功能的描述
notificationTimeout：接受事件的时间间隔，通常将其设置为100即可
packageNames：表示对该服务是用来监听哪个包的产生的事件
canPerformGestures:表示是否允许进行手势分发
canRequestFilterKeyEvents：辅助服务希望能够请求过滤关键事件
nonInteractiveUiTimeout：超时设置，未不包含交互式空间返回合适的值

4.通过 startActivity(Settings.ACTION_ACCESSIBILITY_SETTINGS); 开启辅助功能服务

5.获取事件信息。当我们监听的目标应用界面或者界面等信息，会通过onAccessibilityEvent回调我们的事件，接着进行事件的处理。
getAction()：获取触发此世界的已执行操作
getEventTime()：获取发送此事件的时间
getEventType()：获取事件类型。
getPackageName()：获取源的包名称
从AccessibilityRecord基础的方法
getMaxScrollY()：获取源上边缘的最大滚动偏移（以像素为单位）
getMaxScrollX()：获取源左边缘的最大滚动偏移量（以像素为单位）。
getClassName()：获取源的类名。
getText()：获取事件的文本，比如事件是有TextView发出的,此时获取的就是TextView的text属性。如果该事件源是树结构，那么此时获取的是这个树上所有具有text属性的值的集合
getToIndex()： 获取滚动时文本选择结束的索引或最后一个可见项的索引。
getItemCount()：如果事件源是树结构，将返回该树根节点下子节点的数量
更详细的可以参考官方文档：https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html

关于事件类型getEventType()返回值：

TYPE_VIEW_LONG_CLICKED 长按事件
TYPE_VIEW_CONTEXT_CLICKED点击事件
TYPE_WINDOW_STATE_CHANGED 表示用户界面被更改。
TYPE_NOTIFICATION_STATE_CHANGED：通知栏的改变
TYPE_WINDOWS_CHANGED：表示系统窗口的时间变更
…还有很多，详情可以看看官方文档

ReadMe、、、
本模块为测试，适配了抖音（v24.6.0）、抖音极速版、抖音火山版app的私信聊天界面。
通过监听辅助功能发出的事件来捕获用户在该界面聊天输入的内容
以便于后续将捕获内容进行处理

1.onAccessibilityEvent返回的内容event，其中包含返回事件的packageName、eventType、text、content等。
通过packageName来确实是否是需要监听的app包名；
调试和设计如何根据使用过程中的eventType来完成想实现的功能；

2.抖音聊天内容捕获的实现方式：
【tip：抖音app当前存在两个大版本24及17，这两个版本的聊天界面布局层级不同，所以需要根据版本区分判断。
当前项目代码中编写的是适配24版本的方案。】
2.1添加监听包名
如果只做单独app的监听，可在AndroidManifest中的辅助功能配置文件内添加。详情见上文。
也可在自定义的辅助功能服务里，在onServiceConnected中初始化对应的packages，通过判断返回的事件包名是否包含在packages中来判断。适用于监听多包的情况。

2.2判断是否在聊天界面
由于本功能仅监听抖音聊天界面
为避免出现监听到了其他界面的情况，所以编写了inChatWindow（）方法
通过获取顶层窗口信息，来获取当前窗口下界面布局信息。getRootInActiveWindow（）
通过聊天窗口的一些特性，例：页面子布局数量；是否包含返回控件，等，详见代码
其他类型的功能可根据需求需要设计是否包含这个步骤。

2.3事件处理
2.3.1 AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED
当用户在编辑文本框编辑时，每编辑一个文字，就会返回该事件，并携带着此时文本框中的文字。
由于本功能需要判断编辑的文本是否存在敏感文字，所以此处处理是：
1）过滤掉当文本框未输入文字时返回的【发送消息】
2）判断返回的文字中是否包含在服务初始化时配置的敏感词列表中
3）若包含，则将文字替换为*号；若不包含，则将文字记录，用于后期处理。
4）记录当前文字变化为输入状态。

2.3.2 AccessibilityEvent.TYPE_VIEW_TEXT_SELECTION_CHANGED
当编辑文本框文字发生变化时，则会返回该事件，并携带文本框的文字。
由于抖音app在编辑文字以及发送文字时都会返回该事件，所以用此事件来代表文字发送事件。
但由于编辑文字以及发送文字都会返回该事件，所以通过当前是否为输入状态来判断是否为文字发送事件。
1）过滤掉当文本框未输入文字时返回的【发送消息】
2）判断当前是否为输入状态，为输入状态则不处理。
3）通过布局层级关系获取用户聊天对象昵称 getChatName（）
4）处理之前记录的文字以及上文获取到的聊天对象昵称

2.3.3 AccessibilityEvent.TYPE_VIEW_SCROLLED
由于抖音app在退出并重进聊天界面时会调用该事件，则用此事件返回编辑文本框中已存在的文字
1）判断当前界面是否为聊天界面
2）通过布局层级查找编辑文本框控件
3）过滤掉当文本框未输入文字时返回的【发送消息】
4）记录编辑文字